Problem Description
You are given a string consisting of digits. Find the biggest two-digit value that is a consistent fragment of the given string.

For example, two-digit consistent fragments of "50552" are ["50", "05", "55", "52"], representing the numbers [50, 5, 55, 52]. The biggest value among them is 55.

Write a function:

int solution(string &S);
that, given a string S consisting of digits, returns the maximum two-digit value that is a consistent fragment of S.

Examples
Example 1:
Input: S = "50552"
Output: 55
Example 2:
Input: S = "10101"
Output: 10
Example 3:
Input: S = "88"
Output: 88
Constraints
Assume that:

string S is made only of digits (0-9).
the number of digits of S is within the range [2..100].
S does not start with '0'.
In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.

```

Code:
int solution(string &S){
    int maxi = -1;
    int n = (int)S.size();
    for(int i=0;i<n-1;i++){
        int num = (S[i] - '0')*10 + (S[i+1] - '0');
        int maxi = max(maxi,num);
    }
    return maxi;
}
